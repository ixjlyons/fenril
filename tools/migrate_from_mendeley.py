import sys
import os
import shutil
import argparse
import bibtexparser
from bibtexparser.bparser import BibTexParser

pop_list = ['file', 'keyword', 'mendeley-tags', 'abstract']


def main(args):
    # read Mendeley bib file, strip fields, and write it back out
    strip_and_write(args.bibfile, 'output.bib')

    # migrate pdfs
    move_pdfs(args.bibfile, 'pdfs')


def strip_and_write(inputfile, outputfile):
    bibdata = None
    with open(inputfile, 'r') as f:
        parser = BibTexParser()
        parser.customization = customization
        bibdata = bibtexparser.load(f, parser=parser)

    if bibdata is None:
        sys.exit("Could not load input file {}".format(inputfile))

    with open(outputfile, 'w') as f:
        bibtexparser.dump(bibdata, f)


def move_pdfs(inputfile, outputdir):
    bibdata = None
    with open(inputfile, 'r') as f:
        bibdata = bibtexparser.load(f)

    if bibdata is None:
        sys.exit("Could not load input file {}".format(inputfile))

    if not os.path.exists(outputdir):
        os.makedirs(outputdir)

    for entry in bibdata.entries:
        if 'file' not in entry:
            continue

        pdfin = entry['file'].split(':')[1]
        pdfout = os.path.join(outputdir, entry['ID']+'.pdf')

        if pdfin == '':
            continue
        pdfin = '/' + pdfin
        if not os.path.exists(pdfin):
            continue

        shutil.copyfile(pdfin, pdfout)


def customization(record):
    """Removes the keys in pop_list from the parsed bib file."""
    for popkey in pop_list:
        if popkey in record:
            record.pop(popkey)
    return record


def parse_args():
    parser = argparse.ArgumentParser(
        description="Script to migrate from Mendeley to fenril.")
    parser.add_argument(
        'bibfile',
        help="BibTeX entry generated by Mendeley.")

    return parser.parse_args()


if __name__ == '__main__':
    main(parse_args())
